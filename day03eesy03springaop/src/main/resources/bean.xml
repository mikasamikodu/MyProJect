<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置spring的ioc。把service对象配置进来-->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>

    <!--spring中基于xml的aop配置
            1.将通知bean由spirng管理
            2.使用aop:config标签表明开始aop的配置
            3.使用aop:aspect标签表明配置切面
                id属性：给切面一个唯一的标识
                ref属性：指定通知类bean的id
            4.在aop:aspect内部使用对应的标签来配置通知的类型
                现在的示例是让printlog方法在切入点方法执行之前，所以是前置通知
                aop:before：表示配置前置通知
                    method属性:用于指定logger类中哪个方法为前置通知
                    pointcut属性：用于指定切入点表达式。该表达式含义是对业务层的哪些方法增强

                切入点表达式写法：
                    关键字：execution(表达式)
                    表达式：
                        访问修饰符 返回值 包名.包名....类名.方法名（参数列表）
                    标准表达式写法：
                        public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                        访问修饰符可以忽略
                            void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                        返回值可以使用通配符，表示返回值
                            *  com.itheima.service.impl.AccountServiceImpl.saveAccount()
                        包名可以使用通配符，表示任意包，有几级包就有几个*
                            *  *.*.*.*.AccountServiceImpl.saveAccount()
                        包名可以使用..表示当前包及其子包
                            * *..AccountServiceImpl.saveAccount()
                        类名及方法名都可以使用通配符*进行通配
                            * *..*.*()
                        参数列表：
                            可直接写数据类型
                                基础数据直接写名称       int
                                引用数据类型需要些包名+类名的方式  java.lang.String
                            可以使用通配符表示任意类型，但是必须有参数
                            可以使用..表示有无参数皆可，有参数可以是任意类型
                    全通配写法：
                        * *..*.*(..)
                    实际开发中切入点表达式的通常写法：
                        切到业务实现类下的所有写法：
                            * com.itheima.service.impl.*.*(..)
    -->
    <bean id="logger" class="com.itheima.utils.Logger"></bean>

    <aop:config>
        <!--配置切入点表达式，id用于指定表达式的唯一标识，expression用于指定表达式内容
                此标签在aop:aspect标签内部使用只能在切面内使用
                它还可以写在aop:aspect外面，此时会变成所有标签可用
                当写在外面时，需要写在aop:aspect前面，否则会报错
            -->
        <aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"></aop:pointcut>
        <aop:aspect id="logAdvicw" ref="logger">
            <!--配置前置通知-->
            <!--<aop:before method="printLog" pointcut="execution(public void com.itheima.service.impl.AccountServiceImpl.saveAccount())"></aop:before>
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
            <!--配置后置通知
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>-->
            <!--配置异常通知
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>-->
            <!--配置最终通知
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->
            <!--环绕通知，详情看logging类-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>

    </aop:config>
</beans>